{"version":3,"sources":["context.jsx","components/contacts/Contact.jsx","components/contacts/Contacts.jsx","components/layout/TextInputGroup.jsx","components/contacts/AddContact.jsx","components/contacts/EditContact.jsx","components/layout/Header.jsx","components/pages/About.jsx","components/pages/NotFound.jsx","components/test/Test.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","concat","toConsumableArray","map","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dispatch","setState","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","data","stop","react_default","createElement","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","delete","t0","onShowClick","e","_this2","_this$props$contact","name","email","phone","className","onClick","style","cursor","float","color","bind","react_router_dom","to","marginRight","Contacts","react","contacts_Contact","TextInputGroup","_ref","label","onChange","error","htmlFor","placeholder","defaultProps","AddContact","errors","onSubmit","_this$state","newContact","preventDefault","abrupt","post","history","push","defineProperty","target","_this$state2","layout_TextInputGroup","EditContact","updContact","match","params","put","Header","branding","href","exact","About","NotFound","Test","title","body","fetch","then","response","json","console","log","App","context_Provider","layout_Header","react_router","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.069d2f78.chunk.js","sourcesContent":["// Store의 역할로 redux처럼\r\n// Provider라고 하며 모든 컴포넌트의 wrap 컴포넌트가 된다.\r\n\r\n// https://velopert.com/3606\r\n\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// import uuid from 'uuid';\r\n\r\nconst Context = React.createContext();\r\n\r\n// Redux대신 이건 ContextAPI\r\n// reducer(변형,축소): action으로 state가 바뀐 결과에 대한것을 말함\r\n// dispatch : action을 실행시키는 것을 말함.\r\nconst reducer = (state, action) => {\r\n  // payload: action으로 보내기 원하는 데이터를 말한다.\r\n  switch(action.type){\r\n    case 'DELETE_CONTACT':\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n      };\r\n    case 'ADD_CONTACT':\r\n      return {\r\n        ...state,\r\n        // id,name,email,phone 모든정보를 보내고, state.contacts로 새롭게 보낸다.\r\n        contacts: [action.payload, ...state.contacts]\r\n      };\r\n    case 'UPDATE_CONTACT':\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.map(\r\n          contact => \r\n            contact.id === action.payload.id \r\n              ? (contact = action.payload) \r\n              : contact\r\n        )\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    // contacts: [\r\n    //   {\r\n    //     id: 1,\r\n    //     name: 'jyoung',\r\n    //     email: 'jyoung@gmail.com',\r\n    //     phone: '111-222-333'\r\n    //   },\r\n    //   {\r\n    //     id: 2,\r\n    //     name: 'gloria',\r\n    //     email: 'gloria@gmail.com',\r\n    //     phone: '0514-222-333'\r\n    //   },\r\n    //   {\r\n    //     id: 3,\r\n    //     name: 'joji',\r\n    //     email: 'joji@gmail.com',\r\n    //     phone: '331-222-333'\r\n    //   },\r\n    // ],\r\n\r\n    // JSON placeholder이용\r\n    contacts: [],\r\n    // 해당 dispatch로 setState한 상태를 reducer로 보낸다.\r\n    dispatch: action => {\r\n      // reducer {}감싸면 실행안됨\r\n      this.setState(state => reducer(state, action))\r\n    }\r\n    // 아래 <Context.Provier value로 모든 state에 접근가능하게 해야하는데! 그럴러면 dispatch가 어디서든 접근할 수 있도록 해야한다.\r\n  };\r\n\r\n  // Provider value를 통해 App.jsx에서는 전체 state를 접근할 수있다.\r\n  // Consumer는 Contacts.jsx에서 사용되거나 다른 컴포넌트 들에서 사용 가능하다. \r\n  // Provider에 있는 value에서 받아서 Consumer가 그 value를 이어 받을 수 있다.\r\n\r\n  // componentDidUpdate() {\r\n  //   console.log('componentDidUpdate');\r\n  // }\r\n  // componentWillUpdate() {\r\n  //   console.log('componentWillUpdate');\r\n  // }\r\n\r\n  // res: { data: Array(10), status: 200, statusText: \"\", headers: { … }, config: { … }, … }\r\n  // componentDidMount() {\r\n  //   axios.get('https://jsonplaceholder.typicode.com/users')\r\n  //     .then(res => this.setState({ contacts: res.data }))\r\n  // }\r\n\r\n  // axios는 fetchAPI만 쓰는 것보다 코드가 간결하다\r\n  // 오직 async 안에서 await가 존재할 수있다.\r\n  // async를 promise를 쉽게 반환. then()을 안써도 된다.\r\n  async componentDidMount() {\r\n    const res = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n    // 전체 user객체들을 배열로 반환하고 있다.\r\n    // 그걸 ...user로 복사한후 id값을 uuid()로 넣는다.\r\n    // console.log(res.data.map(user=>console.log(user)))\r\n\r\n    // speard operator\r\n    // const user = [] 있고\r\n    // 그것을 [...user]를 복사후 uuid()를 넣어서 새로반환하는 것\r\n    // this.setState({ contacts: res.data.map(user => ({ ...user, id: uuid() })) });\r\n\r\n    // 만약이 코드를 안쓰고 위에 uuid를 쓰면 Edit할때 json placeholder에 user에서 id값 접근시 uuid 때문에 접근이 안된다.\r\n    // 일단 그냥 아래 코드쓰자\r\n    this.setState({ contacts: res.data });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../context';\r\nimport axios from 'axios';\r\n\r\nclass Contact extends Component {\r\n  state = {\r\n    // \r\n    showContactInfo: false\r\n  };\r\n\r\n  onDeleteClick = async (id, dispatch) => {\r\n    // this.props.deleteClickHandler();\r\n    // dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n\r\n    try {\r\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n      // .then(res => dispatch({ type: 'DELETE_CONTACT', payload: id }));\r\n\r\n      // setState할게 아니라서 그냥 res를 안받음\r\n      dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n    } catch(e) {\r\n      dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n    }\r\n      \r\n  }\r\n\r\n  onShowClick = (e) => {\r\n    this.setState({ \r\n      // toggle을 만들기위한 방식\r\n      showContactInfo: !this.state.showContactInfo\r\n    });\r\n  }\r\n\r\n  render() {\r\n    // Contacts.js에서 map으로 contact을 받음\r\n    const { id, name, email, phone } = this.props.contact;\r\n    const { showContactInfo } = this.state;\r\n\r\n    return (\r\n      // App.js에서 <Provider value={this.state}>다.\r\n      // 그걸 받아서 Consumer에서 value를 사용하고 Provider의 state안에는 dispatch가 있다. \r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card card-body mb-3\">\r\n              <h4>{name}{' '}\r\n                <i\r\n                  // onClick={()=> this.setState}\r\n                  onClick={this.onShowClick}\r\n                  className=\"fas fa-sort-down\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                />\r\n                <i\r\n                  className=\"fas fa-times\"\r\n                  style={{ cursor: \"pointer\", float: \"right\", color: \"red\" }}\r\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                />\r\n                <NavLink to={`contact/edit/${id}`}>\r\n                  <i \r\n                    className=\"fas fa-pencil-alt\"\r\n                    style={{\r\n                      cursor: 'pointer',\r\n                      float: 'right',\r\n                      color: 'black',\r\n                      marginRight: '1rem',\r\n                    }}\r\n                  />\r\n                </NavLink>\r\n\r\n              </h4>\r\n              {showContactInfo ? (<ul className=\"list-group\">\r\n                <li className=\"list-group-item\">Email: {email}</li>\r\n                <li className=\"list-group-item\">Phone: {phone}</li>\r\n              </ul>) : null}\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\n// propTypes는 밖에 쓰자\r\nContact.propTypes = {\r\n  contact: PropTypes.object.isRequired,\r\n  // deleteClickHandler: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Contact;","import React, { Component, Fragment } from 'react';\r\nimport Contact from './Contact';\r\nimport { Consumer } from '../../context';\r\n\r\nclass Contacts extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      // Provider에서 연결받은 value이다.\r\n      <Consumer>\r\n        {value => {\r\n          const { contacts } = value;\r\n          return (\r\n            <Fragment>\r\n              <h1 className=\"display-4 mb-2\">\r\n                <span className=\"text-danger\">Contact</span> List \r\n              </h1>\r\n              {contacts.map(contact => (\r\n                <Contact\r\n                  key={contact.id}\r\n                  contact={contact}\r\n                />\r\n              ))}\r\n            </Fragment>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import classnames from 'classnames';\r\n\r\n// rafce 단축탭\r\n\r\n// AddContact.jsx에서 중복되는 .form-group을 component로 만든다\r\n\r\n// const TextInputGroup = (props) 대신 객체로 넣는다.\r\nconst TextInputGroup = ({\r\n  label,\r\n  name,\r\n  value,\r\n  // placeholder,\r\n  type,\r\n  onChange,\r\n  error\r\n}) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type={type}\r\n        name={name}\r\n        // *NPM module classnames 사용!\r\n        // className={classnames('form-control form-control-lg', {\r\n        //   'is-invalid': error\r\n        // })}\r\n\r\n        // *모듈없이!\r\n        className={\r\n          error\r\n            ? \"is-invalid form-control form-control-lg\"\r\n            : \"form-control form-control-lg\"\r\n        }\r\n        // placeholder={placeholder}\r\n        placeholder={`Enter ${label}...`}\r\n        value={value}\r\n        onChange={onChange}\r\n        // required\r\n      />\r\n      {error && <div className=\"invalid-feedback\">{error}</div>}\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  // placeholder: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  error: PropTypes.string\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n  type: 'text',\r\n}\r\n\r\nexport default TextInputGroup;\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\n// import uuid from 'uuid';\r\nimport axios from 'axios';\r\n\r\n// re-rendering 막기 전 코드다.\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    errors: {},\r\n  }\r\n\r\n  /* 하드코드 방식이라서 구리다.\r\n  onNameChange = (e) => {\r\n    this.setState({name: e.target.value});\r\n  }\r\n  onEmailChange = (e) => {\r\n    this.setState({ email: e.target.value });\r\n  }\r\n  onPhoneChange = (e) => {\r\n    this.setState({ phone: e.target.value });\r\n  }\r\n  */\r\n\r\n  onSubmit = async (dispatch, e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, email, phone } = this.state;\r\n\r\n    // * 또다른 Error 코드\r\n    // for (let prop in this.state) {\r\n    //   if (prop === 'errors') continue;\r\n    //   else if (!this.state[prop]) {\r\n    //     this.setState((prevState) => {\r\n    //       prevState.errors[prop] = `${prop} is required.`\r\n    //       return prevState;\r\n    //     });\r\n    //   } else {\r\n    //     this.setState((prevState) => {\r\n    //       delete prevState.errors[prop];\r\n    //       return prevState;\r\n    //     })\r\n    //   }\r\n    // }\r\n\r\n    // if (!name || !email || !phone) return;\r\n\r\n\r\n    // Check for Errors\r\n    // this.state.name 이라는 것을 잊지 말자\r\n    if (name === '') {\r\n      this.setState({ errors: { name: 'Name is required' }});\r\n      return;\r\n    }\r\n    if (email === '') {\r\n      this.setState({ errors: { email: 'Email is required' } });\r\n      return;\r\n    }\r\n    if (phone === '') {\r\n      this.setState({ errors: { phone: 'Phone is required' } });\r\n      return;\r\n    }\r\n\r\n    const newContact = {\r\n      // universally unique ID\r\n      // uuid로 새 contact에 id를 쉽게 부여\r\n      // id: uuid(),\r\n      name,\r\n      email,\r\n      phone,\r\n    };\r\n\r\n    // dispatch({ type: 'ADD_CONTACT', payload: newContact });\r\n\r\n    const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\r\n      // .then(res =>\r\n      //   dispatch({ type: 'ADD_CONTACT', payload: res.data }));\r\n    dispatch({ type: 'ADD_CONTACT', payload: res.data });\r\n\r\n\r\n\r\n    // clear state : addcontact하고 나서 form을 빈값으로 정리\r\n    this.setState({\r\n      name: '',\r\n      email: '',\r\n      phone: '',\r\n      errors: {}\r\n    });\r\n\r\n    // AddContact.js에서 add후 redirect \r\n    // redirect시 데이터가 사라지고 reload되니까 firebase로 처리\r\n    this.props.history.push('/');\r\n  };\r\n\r\n  // input에 name속성 이용\r\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n  \r\n\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n\r\n          return (\r\n            <div className=\"card mb-3\">\r\n              <div className=\"card-header\">Add Contact</div>\r\n              <div className=\"card-body\">\r\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                  <TextInputGroup \r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    // placeholder=\"Enter Name\"\r\n                    value={name}\r\n                    onChange={this.onChange}\r\n                    error={errors.name}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    // placeholder=\"Enter email\"\r\n                    value={email}\r\n                    onChange={this.onChange}\r\n                    error={errors.email}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    // placeholder=\"Enter phone\"\r\n                    value={phone}\r\n                    onChange={this.onChange}\r\n                    error={errors.phone}\r\n                  />\r\n\r\n                  {/* {Object.keys(this.state).map(field => {\r\n                    console.log(field);\r\n                    return (\r\n                      <TextInputGroup\r\n                        label={field}\r\n                        name={field}\r\n                        value={this.state[field]}\r\n                        placeholder=\"Enter\"\r\n                        type={field}\r\n                        onChange={this.onChange}\r\n                        key={field}\r\n                      />\r\n                    );\r\n                  })}; */}\r\n                  \r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Add Contact\"\r\n                    className=\"btn btn-light btn-block\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n    // 태그들을 모두 Consumer안으로 옮긴다.\r\n    // return (\r\n      // <div></div>\r\n    // )\r\n  }\r\n}\r\n\r\nexport default AddContact;\r\n\r\n\r\n// 간결한 코드!\r\n// return (\r\n//   <Consumer>\r\n//     {context => (\r\n//       <div className=\"card mb-3\">\r\n//         <div className=\"card-header\">Add Contact</div>\r\n//         <div className=\"card-body\">\r\n//           <form\r\n//             onSubmit={e => {\r\n//               e.preventDefault()\r\n//               context.dispatch({\r\n//                 type: 'ADD_CONTACT',\r\n//                 payload: this.state\r\n//               })\r\n//               this.setState({ name: '', email: '', phone: '' })\r\n//             }}>\r\n//             {Object.keys(this.state).map(field => (\r\n//               <div className=\"form-group\" key={field}>\r\n//                 <label\r\n//                   htmlFor={field}\r\n//                   style={‌{textTransform: 'capitalize' }}>\r\n//                       {field}\r\n//                     </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name={field}\r\n//                 className=\"form-control form-control-lg\"\r\n//                 placeholder={`Enter ${field}...`}\r\n//                 value={this.state[field]}\r\n//                 onChange={e => this.setState({ [field]: e.target.value })}\r\n//               />\r\n//                   </div>\r\n//           ))}\r\n//                 <input\r\n//               type=\"submit\"\r\n//               value=\"Add Contact\"\r\n//               className=\"btn btn-block btn-light\"\r\n//             />\r\n//           </form>\r\n//         </div>\r\n//       </div>\r\n//     )}\r\n//   </Consumer>\r\n// )\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\n// import uuid from 'uuid';\r\nimport axios from 'axios';\r\n\r\n// re-rendering 막기 전 코드다.\r\nclass EditContact extends Component {\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    errors: {},\r\n  };\r\n\r\n  // 여기서 코드는 그냥 jsonplaceholder/user의 테스트 코드다. 왜냐면 내가 Add해서 넣으면 그 contact에 edit가 안된다. 기존 서버에 데이터가 없어서. 그래서 여기서는 users에 있는 것만 접근된다.\r\n  async componentDidMount() {\r\n    // 여기서 get()으로 접근만 하는 코드\r\n    const { id } = this.props.match.params;\r\n    const res = await axios.get(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n    const contact = res.data;\r\n\r\n    this.setState({\r\n      name: contact.name,\r\n      email: contact.email,\r\n      phone: contact.phone,\r\n    });\r\n  }\r\n\r\n  onSubmit = async (dispatch, e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, email, phone } = this.state;\r\n\r\n    // Check for Errors\r\n    // this.state.name 이라는 것을 잊지 말자\r\n    if (name === '') {\r\n      this.setState({ errors: { name: 'Name is required' } });\r\n      return;\r\n    }\r\n    if (email === '') {\r\n      this.setState({ errors: { email: 'Email is required' } });\r\n      return;\r\n    }\r\n    if (phone === '') {\r\n      this.setState({ errors: { phone: 'Phone is required' } });\r\n      return;\r\n    }\r\n\r\n    // 실제 edit를 put해서 바꾸는 처리\r\n    const updContact = {\r\n      // ES6 name:name을 하나로 처리\r\n      name,\r\n      email,\r\n      phone\r\n    }\r\n    const { id } = this.props.match.params;\r\n    const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\r\n\r\n    dispatch({type: 'UPDATE_CONTACT', payload: res.data});\r\n\r\n    // Clear \r\n    this.setState({\r\n      name: '',\r\n      email: '',\r\n      phone: '',\r\n      errors: {}\r\n    });\r\n\r\n    this.props.history.push('/');\r\n  };\r\n\r\n  // input에 name속성 이용\r\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n\r\n          return (\r\n            <div className=\"card mb-3\">\r\n              <div className=\"card-header\">Edit Contact</div>\r\n              <div className=\"card-body\">\r\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                  <TextInputGroup\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    // placeholder=\"Enter Name\"\r\n                    value={name}\r\n                    onChange={this.onChange}\r\n                    error={errors.name}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    // placeholder=\"Enter email\"\r\n                    value={email}\r\n                    onChange={this.onChange}\r\n                    error={errors.email}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    // placeholder=\"Enter phone\"\r\n                    value={phone}\r\n                    onChange={this.onChange}\r\n                    error={errors.phone}\r\n                  />\r\n\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Update Contact\"\r\n                    className=\"btn btn-light btn-block\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditContact;\r\n","import React from 'react';\r\n// impt\r\nimport PropTypes from 'prop-types';\r\n\r\n// https://reacttraining.com/react-router/web/api/NavLink\r\n// Link: 해당 path 연결\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n  const { branding } = props;\r\n  return (\r\n    <div>\r\n      {/* <h1 style={{color: 'red', fontSize: '30px'}}>{branding}</h1> */}\r\n      {/* <h1 style={headingStyle}>{branding}</h1> */}\r\n      {/* <h1>{branding}</h1> */}\r\n\r\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n        <div className=\"container\">\r\n          <a href=\"/\" className=\"navbar-brand\">\r\n            {branding}\r\n          </a>\r\n          <div>\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item\">\r\n                {/* <a href=\"/\" className=\"nav-link\">Home</a> */}\r\n                <NavLink exact to=\"/\" className=\"nav-link\">\r\n                  <i className=\"fas fa-home\" /> Home\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <NavLink to=\"/contact/add\" className=\"nav-link\">\r\n                  <i className=\"fas fa-plus\" /> Add\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <NavLink to=\"/about\" className=\"nav-link\">\r\n                  <i className=\"fas fa-question\" /> About\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  branding: {\r\n    name: 'My App'\r\n  }\r\n};\r\n\r\nHeader.propTypes = {\r\n  branding: PropTypes.string.isRequired,\r\n};\r\n\r\n// const headingStyle = {\r\n//   color: 'red',\r\n//   fontSize: '50px'\r\n// };\r\n\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n// const About = (props) => {\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">About contact manager</h1>\r\n      {/* App.js에서 /about/:id 부분이 params 연결  */}\r\n      {/* <h1 className=\"display-4\">{props.match.params.name}</h1> */}\r\n      <p className=\"lead\">simple app to manage contacts</p>\r\n      <p className=\"text-secondary\">Version 1.0.0</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">\r\n        <span className=\"text-danger\">404</span> Page Not Found</h1>\r\n      <p className=\"lead\">Sorry, that page does not exist</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","// Life cyle - Test 코드\r\n// https://velopert.com/3631\r\n\r\nimport React, { Component } from 'react';\r\n\r\nclass Test extends Component {\r\n  state ={\r\n    title: '',\r\n    body: ''\r\n  }\r\n\r\n  componentDidMount() {\r\n    // console.log('componentDidMount');\r\n    fetch('https://jsonplaceholder.typicode.com/posts/1')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({\r\n        title: data.title,\r\n        body: data.body,\r\n      }));\r\n  }\r\n\r\n  // Legacy\r\n  // WillMount, WillReceiveProps, WillUpdate\r\n\r\n  // 앞으로는 DidMount에서 처리가능\r\n  componentWillMount() {\r\n    console.log('componentWillMount');\r\n  }\r\n\r\n  // context.jsx에 놓고 update되면 실행된다/\r\n  // componentDidUpdate() {\r\n  //   console.log('componentDidUpdate');\r\n  // }\r\n  \r\n  // componentWillUpdate() {\r\n  //   console.log('componentWillUpdate');\r\n  // }\r\n\r\n  // Deprecated function\r\n  // componentWillReceiveProps(nextProps, nextState) {\r\n  //   console.log('componentWillReceiveProps');\r\n  // }\r\n\r\n  // Legacy\r\n  // Props로부터 파생된 State를 얻었다.는 의미\r\n  // static getDerivedStateFromProps(nextProps, prevState) {\r\n  //   // return null;\r\n  //   return {\r\n  //     test: 'something'\r\n  //   }\r\n  // };\r\n\r\n  // Legacy\r\n  // getSnapshotBeforeUpdate(prevProps, prevState) {\r\n  //   console.log('getSnapshotBeforeUpdate');\r\n  // }\r\n  \r\n  render() {\r\n    const { title, body } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>{title}</h1>\r\n        <p>{body}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Test;\r\n","import React, { Component } from 'react';\n/*\n  * BrowserRouter: 모든 router를 저장된 parent component\n  * Router: jsx로 태그\n  * Switch: default page를 말함 not found page같이, switch안에서 모든 path 이동\n*/\n// BrowserRouter 대신에 githubpage를 위해 HashRouter\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n// import Contact from './components/Contact';\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/test/Test';\n\nimport { Provider } from './context';\n\n// node-modules에 있는 것\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n/*\n  04 App.js\n  1. npm install --save bootstrap\n    - 부트스트랩 적용\n  2. fontawesome 적용\n  3. event 적용법 Contact.js\n  4. Fragment로 적용하면 쓸때없는 div가 없어짐\n  5. changing state\n    - this.state로 변경못함! \n    - setState 사용!\n  6. changing state from other component\n  7. ContextAPI , provider state\n    - redux는 큰 프로젝트에서 contextapi는 작은단위유용함(single place일때)\n    - action, dispatch, reducer 개념 적용!\n  8. AddContact.js 컴포넌트 추가\n    - onChange(): component controll\n    - onSubmit()\n  9. Uncontrolled component , Ref\n    - 모든 컴포넌트가 re-rendering 되기때문에 고쳐야한다.\n  10. InputGroup componenet\n    - AddContact.jsx에서 .form-group이 중복되니까 layout/TextInputGroup.jsx로 뺀다\n    - Object.key 이용법 알아보자\n  11. Error checking\n    - TextInputGroup.jsx 에 error 체크 코드\n    - npm i classnames (classname을 쉽게 추가해주는 모듈)\n      - bootstrap으로 errors class 넣기위해사용\n  12. React Router \n    - npm i react-router-dom\n    - about\n    - Header.js\n    - NavLink(or Link) 사용, param 연결, AddContact.js에서 form보내고 redirect\n    - pages/NotFound.jsx\n  13. Life cycle - Test.jsx / context.jsx\n    - json placeholder 사용\n  14. axios 설치\n    - Promise based HTTP client for the browser and node.js\n    - npm i axios\n    - axios를 사용하여 GET,POST,DELETE,UPDATE 만든다.\n    - async await 사용\n  15. EditContact.jsx를 만든다.\n*/\n\nclass App extends Component {\n  render() {\n   return (\n     <Provider>\n       {/* Router, Route 차이 */}\n       <Router>\n      <div className=\"App\">\n        <Header branding=\"Contact Manager\" />\n        <div className=\"container\">\n          {/* <Contact name=\"john doe\" email=\"jyoung@gmail.com\" phone=\"555-55-5555\" />\n          <Contact name=\"karen\" email=\"karen@gmail.com\" phone=\"555-55-5555\" />  */}\n          {/* <AddContact />\n          <Contacts /> */}\n          <Switch>\n            {/* route하나에 여러 component */}\n            {/* <Route path='/somepath' render={props =>\n              <div>\n                <ComponentA />\n                <ComponentB />\n              </div>\n            } /> */}\n\n            <Route exact path=\"/\" component={Contacts} />\n            <Route exact path=\"/contact/add\" component={AddContact} />\n            <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n            {/* About.js에서 param 연결시키는법 */}\n            {/* <Route exact path=\"/about/:name\" component={About} /> */}\n            <Route exact path=\"/about\" component={About} />\n            <Route exact path=\"/test\" component={Test} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </div>\n       </Router>\n     </Provider>\n   );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}